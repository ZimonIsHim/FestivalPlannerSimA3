package FestivalPlanner.Agenda;

import FestivalPlanner.GUI.AgendaGUI.PopUpGUI.AbstractDialogPopUp;
import java.io.*;
import java.util.ArrayList;

//TODO: Decide whether we want or don't want to support text-file saving, because of its obvious limitations.
//TODO: Write method for loading text data.
//TODO: Check schoolbook about Java, since it said something about optimizing OutputStreams.
/**
 * Contains all methods needed to save data generated by our software.
 */
public class SaveHandler extends AbstractDialogPopUp {

    /**
     * Creates a text-file and writes data generated in <code>generateData()</code> to it.
     * @param fileName  String used as the filename
     * @param agenda  an agenda to pull shows from using <code>getShows()</code>
     * @return  a text-file containing save-data
     */
    public File writeToTextFile (String fileName, Agenda agenda){
        File file = new File(fileName + ".txt");

        try (PrintWriter printWriter = new PrintWriter(file.getName())) {
            printWriter.println(generateData(agenda.getShows()));
        } catch (Exception e) {
            showExceptionPopUp(e);
        }

        return file;
    }

    /**
     * Generates the content of our save-text-files and returns it as a String.
     * <p>
     * The <i>shows</i> parameter should only ever receive agenda.getShows() as input.
     * @param shows  ArrayList to generate data from
     * @return  a String containing all data necessary to save the shows to a text-file
     */
    private String generateData(ArrayList<Show> shows){
        String generatedData = "";

        //TODO: NOTE: This does not currently work. This code is here as a placeholder so that others can call this method and work
        // with it despite not being made yet.
        for (Show show : shows){
            //Write simple data
            generatedData += show.getName() + ";" + show.getStartTime() + ";" + show.getEndTime() + ";"
            + show.getExpectedPopularity() + ";";

            //Write stage
            generatedData += show.getPodium().getName() + ";" + show.getPodium().getLocation() + ";";

            //Write artists
            for (Artist artist : show.getArtists()){
                generatedData += artist.getName();
            }

            //Inserts a linebreak for all shows, apart from the last one.
            if (shows.indexOf(show) != shows.size() - 1){
                generatedData += "\n";
            }
        }

        return generatedData;
    }

    public void writeAgendaToFile(String fileName, Agenda agenda){
        try(ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(fileName))){
            output.writeObject(new Agenda(agenda.getName(), agenda.getShows()));
        } catch (Exception e){
            showExceptionPopUp(e);
        }
    }

    public Agenda readAgendaFromFile(String fileName){
        Agenda agenda = new Agenda();

        try(ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(fileName))){

            //Sets the new instance of Agenda to the one from the ObjectInputStream.
            agenda = (Agenda) (inputStream.readObject());

        } catch (Exception e){
            showExceptionPopUp(e);
        }

        return agenda;
    }

}
